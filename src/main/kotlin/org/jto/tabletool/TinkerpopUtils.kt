package org.jto.tabletoolimport org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversalimport org.apache.tinkerpop.gremlin.structure.Verteximport org.apache.tinkerpop.gremlin.structure.VertexPropertyfun GraphTraversal<Vertex, Vertex>.updateVertexProperties(properties:Map<String, String>): GraphTraversal<Vertex, Vertex>{    var resultVertex = this    properties.forEach { (name, value) -> resultVertex = resultVertex.property(name, value) }    return resultVertex}fun<V> VertexProperty<V>.valueOrDefault(defaultValue:V):V =    when (this.isPresent) {        true -> value()        false -> defaultValue    }fun VertexProperty<String>.valueOrEmpty():String = valueOrDefault("")fun<V> Vertex.propertyOrDefault(key:String, defaultValue: V) = this.property<V>(key).valueOrDefault(defaultValue)fun Vertex.propertyOrEmpty(key: String) = this.property<String>(key).valueOrEmpty()fun Vertex.toStr():String {    val properties = properties<String>().asSequence().sortedBy{ it.key() }.map {        "${it.key()}:='${it.value()}'"    }.joinToString(";")    return "Label: '${label()}' Properties:$properties"}