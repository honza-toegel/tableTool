package org.jto.tabletoolimport org.bitbucket.cowwoc.diffmatchpatch.DiffMatchPatchabstract class TableValue {    companion object {        val dmp = DiffMatchPatch()    }    override fun equals(other: Any?): Boolean =        when (this) {            is StringTableValue -> when (other) {                is StringTableValue -> str == other.str                is RegExpTableValue -> str.matches(other.regex)                else -> super.equals(other)            }            is RegExpTableValue -> when (other) {                is StringTableValue -> other.str.matches(regex)                is RegExpTableValue -> regex.pattern == other.regex.pattern                else -> super.equals(other)            }            else -> super.equals(other)        }    abstract fun diff(other:TableValue):List<DiffMatchPatch.Diff>}class StringTableValue(val str:String): TableValue() {    override fun diff(other: TableValue): List<DiffMatchPatch.Diff> =        when (other) {            is StringTableValue -> dmp.diffMain(str, other.str, false)            is RegExpTableValue -> {                when (str.matches(other.regex)) {                    true -> listOf(DiffMatchPatch.Diff(DiffMatchPatch.Operation.EQUAL, str))                    false -> listOf(DiffMatchPatch.Diff(DiffMatchPatch.Operation.INSERT, str))                }            }            else -> emptyList()        }    companion object {        val Empty = StringTableValue("")    }    override fun toString(): String = str}class RegExpTableValue(val defaultStr:String, val regex: Regex): TableValue() {    init {        require(regex.matches(defaultStr))            {"The default string: '$defaultStr' doesnt match with regEx: '$regex'"}    }    override fun diff(other: TableValue): List<DiffMatchPatch.Diff> =        when (other) {            is RegExpTableValue -> dmp.diffMain(regex.pattern, other.regex.pattern, false)            is StringTableValue -> {                when (other.str.matches(regex)) {                    true -> listOf(DiffMatchPatch.Diff(DiffMatchPatch.Operation.EQUAL, other.str))                    false -> listOf(DiffMatchPatch.Diff(DiffMatchPatch.Operation.INSERT, other.str))                }            }            else -> emptyList()        }    override fun toString(): String = defaultStr}